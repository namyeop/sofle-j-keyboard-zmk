#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <2>;      // 0
            time-to-max-speed-ms = <300>;      // 500
            delay-ms = <0>;                   //   10
        };

        mt {
            tapping-term-ms = <280>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            global-quick-tap;
        };

        // 간소화된 탭댄스 정의
        td_lbkt: tap_dance_lbkt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp LBRC>;  // [ 와 {
        };

        td_rbkt: tap_dance_rbkt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RBKT>, <&kp RBRC>;  // ] 와 }
        };

        td_bslh: tap_dance_bslh {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSLH>, <&kp PIPE>;  // \ 와 |
        };

        td_equal: tap_dance_equal {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp EQUAL>, <&kp PLUS>;  // = 와 +
        };

        td_sqt: tap_dance_sqt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp DQT>;  // ' 와 "
        };

        // 스티키 레이어 정의
        sl_key: sticky_layer {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <20>;
    };

    keymap {
        compatible = "zmk,keymap";
        
        layer0 {
            bindings = <
            &kp GRAVE        &kp N1                     &kp N2     &kp N3      &kp N4        &kp N5     &mmv MOVE_UP     &kp N6      &kp N7         &kp N8         &kp N9       &kp N0           &kp MINUS
            &kp TAB          &kp Q                      &kp W      &kp E       &kp R         &kp T      &mmv MOVE_DOWN   &kp Y       &kp U          &kp I          &kp O        &kp P            &kp BACKSPACE
            &mt LCTRL LCAPS  &mt LCTRL A                &mt LALT S &mt LGUI D  &mt LSHIFT F  &kp G      &mmv MOVE_LEFT   &kp H       &mt LSHIFT J   &mt LGUI K     &mt LALT L   &mt LCTRL SEMI   &kp ENTER
            &kp LSHIFT       &kp Z                      &kp X      &kp C       &kp V         &kp B      &mmv MOVE_RIGHT  &kp N       &kp M          &kp COMMA      &kp DOT      &kp FSLH         &kp RSHIFT
            &to 3            &mt LS(LC(LA(LGUI))) LCAPS &kp LGUI   &kp LALT    &kp SPACE     &lt 1 F18  &mkp LCLK        &lt 2 ESC   &kp RGUI       &sl_key 4      &kp RCTRL    &kp DEL
            >;

            display-name = "main";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_1 {
            bindings = <
            &trans      &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &kp UP        &kp F6           &kp F7           &kp F8       &kp F9    &kp F10  &kp F11
            &trans      &trans           &mkp MB4        &mkp MB5         &mkp RCLK        &trans             &kp DOWN      &kp PG_UP        &kp END          &trans       &trans    &trans   &kp F12
            &trans      &trans           &trans          &trans           &trans           &trans             &kp LEFT      &kp PG_DN        &trans           &trans       &trans    &trans  &trans
            &trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &kp RIGHT     &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT   &trans    &trans   &trans
            &kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &kp ENTER     &trans           &trans           &trans       &trans    &trans
            >;
 
            display-name = "function";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
            &bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
            &bt BT_CLR_ALL  &trans        &trans          &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
            &trans          &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
            &trans          &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
            &trans          &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            display-name = "media";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
            &kp GRAVE         &kp N1                     &kp N2     &kp N3      &kp N4        &kp N5     &mmv MOVE_UP     &kp N6      &kp N7         &kp N8                    &kp N9       &kp N0             &kp MINUS
            &kp TAB           &kp Q                      &kp W      &kp E       &kp R         &kp T      &mmv MOVE_DOWN   &kp Y       &kp U          &kp I                     &kp O        &kp P              &kp BACKSPACE
            &mt LGUI LCAPS    &mt LGUI A                 &mt LALT S &mt LCTRL D &mt LSHIFT F  &kp G      &mmv MOVE_LEFT   &kp H       &mt LSHIFT J   &mt LCTRL K               &mt LALT L   &mt LGUI SEMI      &kp ENTER
            &kp LSHIFT        &kp Z                      &kp X      &kp C       &kp V         &kp B      &mmv MOVE_RIGHT  &kp N       &kp M          &kp COMMA                 &kp DOT      &kp FSLH           &kp RSHIFT
            &to 0             &mt LS(LC(LA(LGUI))) LCAPS &kp LCTRL  &kp LALT    &kp SPACE     &lt 1 F18  &mkp LCLK        &lt 2 ESC   &kp LCTRL      &mt LS(LC(LA(LGUI))) F18  &kp LCTRL    &kp DEL
            >;

            display-name = "windows";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans        &trans     &trans
            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &td_lbkt  &td_rbkt &td_bslh      &td_equal  &trans
            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans        &td_sqt    &trans
            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans        &trans     &trans
            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans        &trans
            >;

            display-name = "coding";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
